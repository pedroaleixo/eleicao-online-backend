/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.model.Eleitor;
import io.swagger.model.Erro;
import io.swagger.model.FiltroPessoa;
import io.swagger.model.FiltroVotantes;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-28T03:34:36.276Z[GMT]")
@Validated
public interface EleitorApi {

    @Operation(summary = "Atualiza um eleitor", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Eleitor.class))),
        
        @ApiResponse(responseCode = "400", description = "Entrada inválida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "409", description = "Erro de negócio", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Eleitor> atualizarEleitor(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto eleitor que precisa ser atualizado", required=true, schema=@Schema()) @Valid @RequestBody Eleitor body);


    @Operation(summary = "Busca o eleitor pelo id", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Eleitor.class))),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "404", description = "Candidato não encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Eleitor> buscarEleitorPeloId(@Parameter(in = ParameterIn.PATH, description = "Id do eleitor buscado", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Buscar eleitores por filtro", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Eleitor.class)))),
        
        @ApiResponse(responseCode = "400", description = "Entrada inválida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "404", description = "Nenhum resultado encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor/filtro",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Eleitor>> buscarEleitoresPorFiltro(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto filtro para restringir a busca", required=true, schema=@Schema()) @Valid @RequestBody FiltroPessoa body);


    @Operation(summary = "Buscar eleitores votantes", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Eleitor.class)))),
        
        @ApiResponse(responseCode = "400", description = "Entrada inválida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "404", description = "Nenhum resultado encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor/votantes",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Eleitor>> buscarEleitoresVotantes(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto filtro para restringir a busca", required=true, schema=@Schema()) @Valid @RequestBody FiltroVotantes body);


    @Operation(summary = "Cadastrar um novo eleitor", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Eleitor.class))),
        
        @ApiResponse(responseCode = "400", description = "Entrada inválida", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "409", description = "Erro de negócio", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Eleitor> cadastrarEleitor(@Parameter(in = ParameterIn.DEFAULT, description = "Objeto eleitor que precisa ser cadastrado", required=true, schema=@Schema()) @Valid @RequestBody Eleitor body);


    @Operation(summary = "Remove o eleitor", description = "", security = {
        @SecurityRequirement(name = "eleicaoonline_auth", scopes = {
            "administrador",
"comissao",
"eleitor"        })    }, tags={ "eleitor" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sucesso"),
        
        @ApiResponse(responseCode = "401", description = "Usuário não autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "404", description = "Eleitor não encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "409", description = "Erro de negócio", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))),
        
        @ApiResponse(responseCode = "500", description = "Erro de sistema", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Erro.class))) })
    @RequestMapping(value = "/eleitor/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removerEleitor(@Parameter(in = ParameterIn.PATH, description = "Id do eleitor a ser removido", required=true, schema=@Schema()) @PathVariable("id") Long id);

}

